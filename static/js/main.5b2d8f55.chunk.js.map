{"version":3,"sources":["components/Home.js","components/History.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","style","height","to","createBrowserHistory","Search","location","useState","language","setLanguage","input","setInput","useEffect","q","URLSearchParams","search","get","onSubmit","e","preventDefault","History","push","url","window","open","focus","type","placeholder","value","onChange","target","App","history","path","component","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAqBeA,EAlBF,WACX,OACE,oCACE,yBAAKC,UAAU,0BAA0BC,MAAO,CAAEC,OAAQ,UACxD,yBAAKF,UAAU,aACb,mDACA,iEAEA,kBAAC,IAAD,CAAMG,GAAG,qDAAqDH,UAAU,wBAAxE,iB,eCTKI,gBCiEAC,EAhEA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAECC,mBAAS,IAFV,mBAExBC,EAFwB,KAEdC,EAFc,OAGLF,mBAAS,IAHJ,mBAGxBG,EAHwB,KAGjBC,EAHiB,KAM/BC,qBAAU,WAER,IAEMC,EAFS,IAAIC,gBAAgBR,EAASS,QAE3BC,IAAI,KAErBP,EAAYI,GAAQ,cAEnB,IAiBH,OACE,oCACE,yBAAKb,UAAU,sBACb,yBAAKA,UAAU,iBAAiBC,MAAO,CAAEC,OAAQ,UAE/C,4BAAKM,EAAL,sCACA,2BACE,0BAAMR,UAAU,aAAaQ,EAA7B,KADF,qCAIA,0BAAMS,SAxBO,SAACC,GAEpBA,EAAEC,iBAEFV,EAAYC,GAEZU,EAAQC,KAAK,6CAA+CX,GAC5D,IAAIY,EAAM,wJAAwJZ,EACxJa,OAAOC,KAAKF,EAAI,UACtBG,QAEJd,EAAS,KAa2BX,UAAU,QACtC,yBAAKA,UAAU,eACb,2BACE0B,KAAK,OACL1B,UAAU,eACV2B,YAAY,qBACZC,MAAOlB,EACPmB,SAAU,SAACX,GAAD,OAAOP,EAASO,EAAEY,OAAOF,UAGrC,yBAAK5B,UAAU,sBACb,4BAAQA,UAAU,kBAAkB0B,KAAK,UAAzC,sBClCDK,MAdf,WACE,OACE,oCACE,kBAAC,IAAD,CAAQC,QAASZ,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,qCAAqCC,UAAWnC,EAAMoC,OAAK,IACvE,kBAAC,IAAD,CAAOF,KAAK,6CAA6CC,UAAW7B,IACpE,kBAAC,IAAD,CAAO4B,KAAK,IAAIC,UAAW7B,QCFjB+B,QACW,cAA7Bb,OAAOjB,SAAS+B,UAEe,UAA7Bd,OAAOjB,SAAS+B,UAEhBd,OAAOjB,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b2d8f55.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  return (\n    <>\n      <div className='bg-dark text-light pt-5' style={{ height: '100vh' }}>\n        <div className='container'>\n          <h1>Happy New Year 2023</h1>\n          <p>Wishing you a very happy new year.</p>\n\n          <Link to='/wishing-you-a-happy-new-year-2023/name?q=Himanshu' className='btn btn-primary mr-3'>\n            Developer\n          </Link>\n          \n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React, { useState, useEffect } from 'react';\nimport History from './History';\n\nconst Search = ({ location }) => {\n  // useState hooks for input and language\n  const [language, setLanguage] = useState('');\n  const [input, setInput] = useState('');\n\n  // equivalent to componentDidMount, fires once when component mounts\n  useEffect(() => {\n    // get all the URLParams\n    const params = new URLSearchParams(location.search);\n    // get the q param\n    const q = params.get('q');\n    // set language in state to the q parameter\n    setLanguage(q ? q : 'Himanshu');\n    //eslint-disable-next-line\n  }, []);\n\n  // function for handling form submit\n  const submitAction = (e) => {\n    // prevents default, so page won't reload on form submit\n    e.preventDefault();\n    // set language in state\n    setLanguage(input);\n    // add query string to URL\n    History.push('/wishing-you-a-happy-new-year-2023/name?q=' + input);\n    var url = 'https://wa.me/?text=Wishing you a very Happy New Year. Have a look!..... https://himanshu-vishwas.github.io/wishing-you-a-happy-new-year-2023/name?q='+input;\n    var win = window.open(url,'_blank');\n    win.focus();\n    // clear the input\n    setInput('');\n  };\n\n  return (\n    <>\n      <div className='bg-dark text-light'>\n        <div className='container pt-5' style={{ height: '100vh' }}>\n          \n          <h1>{language} wishes you a very happy new year.</h1>\n          <p>\n            <span className='text-info'>{language} </span>wishes you a very happy new year.\n          </p>\n\n          <form onSubmit={submitAction} className='mt-5'>\n            <div className='input-group'>\n              <input\n                type='text'\n                className='form-control'\n                placeholder='Enter your name...'\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n              />\n\n              <div className='input-group-append'>\n                <button className='btn btn-primary' type='submit'>\n                  Send wishes\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport './App.css';\nimport { Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Search from './components/Search';\nimport History from './components/History';\n\nfunction App() {\n  return (\n    <>\n      <Router history={History}>\n        <Switch>\n          <Route path='/wishing-you-a-happy-new-year-2023' component={Home} exact />\n          <Route path='/wishing-you-a-happy-new-year-2023/name?q=' component={Search} />\n          <Route path='*' component={Search} />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}